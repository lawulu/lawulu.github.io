<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>璐濒殉漂流记</title>
    <link>https://lawulu.github.io/tags/logback/feed/index.xml</link>
    <description>Recent content on 璐濒殉漂流记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="https://lawulu.github.io/tags/logback/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Logback的一些奇技淫巧</title>
      <link>https://lawulu.github.io/post/Logback%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/Logback%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</guid>
      <description>

&lt;p&gt;Logback是一款非常优秀的日志框架。但是每个开发面对的需求也是多种多样的。
如果你有下面的需求，那你看了这篇文章就可以了：
1. 每次调用链都生成一个唯一的traceId
2. 修改配置文件即时生效，例如，为了定位一个问题，临时将log级别修改为debug
3. 不同环境使用不同的配置
4. Logback的默认Rolling策略是：有新的Log产生，如果需要rolling，则rename原来的文件。这样会存在的一个问题就是，如果没有新的log产生，就不会重命名原来的文件。如果遇上需要同步日志（例如Rsync），就会出现问题。&lt;/p&gt;

&lt;h3 id=&#34;日志的traceid&#34;&gt;日志的TraceId&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;在Filter里面增加一个，ThreadLocal based 变量：
```
public class CustomFilter extends OncePerRequestFilter {
	&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;	/** The Constant random. */
	private static final Random random = new Random(System.currentTimeMillis()); //TODO&lt;/p&gt;

&lt;p&gt;	@Override
	protected void doFilterInternal(HttpServletRequest request,
			HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {&lt;/p&gt;

&lt;p&gt;		request.setAttribute(ApiConstants.RQID, rnd);&lt;/p&gt;

&lt;p&gt;		response.setHeader(ApiConstants.HEADER_RQID, rnd);
		MDC.put(ApiConstants.RQID, rnd);
		try{
			filterChain.doFilter(request, response);
		}finally{
			MDC.remove(ApiConstants.RQID);
		}&lt;/p&gt;

&lt;p&gt;	}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2. 配置文件

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;encoder&gt;
	        &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss} %-4relative [%thread] %-5level %logger{35} [%X{x-jjk-rqid:-notFound}]- %msg%n&lt;/pattern&gt;
	    &lt;/encoder&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;### 自动更新配置
显然会影响效率
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;configuration debug=&#34;true&#34; scan=&#34;true&#34; scanPeriod=&#34;1 minutes&#34;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;### 各个环境引入不同的Profile

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;	&lt;property resource=&#34;config/config-${envTarget}.properties&#34;/&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;### 基于条件写不同的文件：SiftingAppender


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;appender name=&#34;stats&#34; class=&#34;ch.qos.logback.classic.sift.SiftingAppender&#34;&gt;
        &lt;!-- in the absence of the class attribute, it is assumed that the
             desired discriminator type is
             ch.qos.logback.classic.sift.MDCBasedDiscriminator --&gt;
        &lt;discriminator&gt;
            &lt;key&gt;date&lt;/key&gt;
            &lt;defaultValue&gt;unknown&lt;/defaultValue&gt;
        &lt;/discriminator&gt;
        &lt;sift&gt;
            &lt;appender name=&#34;FILE-${date}&#34; class=&#34;ch.qos.logback.core.FileAppender&#34;&gt;
                &lt;file&gt;/mnt/media-${date}.log&lt;/file&gt;
                &lt;!--&lt;append&gt;false&lt;/append&gt;--&gt;
                &lt;encoder&gt;
                    &lt;pattern&gt;%msg%n&lt;/pattern&gt;
                    &lt;charset&gt;UTF-8&lt;/charset&gt;
                &lt;/encoder&gt;
            &lt;/appender&gt;
        &lt;/sift&gt;
    &lt;/appender&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;代码中需要写MDC变量：

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;    MDC.put(&amp;quot;date&amp;quot;, dateString);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>