<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>璐濒殉漂流记</title>
    <link>https://lawulu.github.io/tags/tracking/feed/index.xml</link>
    <description>Recent content on 璐濒殉漂流记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="https://lawulu.github.io/tags/tracking/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>广告的Tracking(AdNetwork&#39;s Point of view)</title>
      <link>https://lawulu.github.io/post/%E5%B9%BF%E5%91%8A%E7%9A%84Tracking/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/%E5%B9%BF%E5%91%8A%E7%9A%84Tracking/</guid>
      <description>

&lt;p&gt;&lt;em&gt;&lt;strong&gt;广告新人的一些感想&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;在移动互联网烧钱大潮中，（传统来说）有流量变现能力只有广告了。当每一次点击都与钱相关时候，机会和伴随机会而来的混乱就出现了。&lt;/p&gt;

&lt;h2 id=&#34;商机&#34;&gt;商机&lt;/h2&gt;

&lt;p&gt;对于移动强CPA广告来说，最大的痛点就是转化的核算和归因。各种第三方平台（友盟，TalkingData，热云……），各种不同的规范……，能否成立的一家Tracking平台，帮助AdNetwork来统一追踪。甚至有了各家的数据之后（因为各家的为了Tracking，都要把DevieId通过平台透传）：可以收钱做优化，因为平台（从整个宏观数据可以看出）知道哪类流量适合哪类推广；也可以卖数据甚至卖流量。其实类似想统一混乱的公司有Appcoach,Affiliate，mediation。。简单写一下我们用的FC.&lt;/p&gt;

&lt;h3 id=&#34;fc的做法&#34;&gt;FC的做法&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;为每一个AdNetwork建立一个Tracking Link，在Dashboard中配置对应的宏和Postback Url。&lt;/li&gt;
&lt;li&gt;提供报表做到小时级别的统一，方便了不同时区的用户。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;归因是怎么做的&#34;&gt;归因是怎么做的&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;渠道包，因为（国内）Android并没有一个强势如AppStore的（混乱之源之一）应用商店，所以就会有渠道包这种东西。之前公司每次上线Android，有专门的应用分发脚本，给不同渠道的包不一样。这样就可以知道各个渠道的推广情况。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;根据设备id归因：对于Android来说国内是IMEI和AndroidId，国外是GAID。iOS比较规范，一般使用IDFA，不过新版iOS用户据说可以关闭广告追踪。详细流程再下面讲。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fingerprint：大的平台会基于设备的零散数据例如ip,ua，通过数据积累，当遇到没有设备id信息的归因问题时，就用这些零散的数据作为唯一标示确认唯一性。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Referrer来源：如果应用商店支持，可以传递参数表明自己的渠道信息。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;tracking流程&#34;&gt;Tracking流程&lt;/h2&gt;

&lt;h3 id=&#34;tracking&#34;&gt;Tracking&lt;/h3&gt;

&lt;p&gt;对AdNetwork来说，由于无法知道是否安装完成，所以要通过第三方的平台来完成计费。所以，Tracking一般分为Click上报和Install的Postback。即当用户要下载一个App时候，AdNetwork马上告诉广告主（或者代表广告主的检测平台），快看，我这有个用户点击了，他要安装了！！然后就开始默默的等待..广告主收到一个安装，就会根据安装时候的信息反过来去找是谁上报的，一般会根据设备的信息（混乱之源之一)来匹配。所以上报时候一定要把设备信息给带上。上报分302让客户端上报和S2S对接两种，按下不表。&lt;/p&gt;

&lt;h3 id=&#34;宏替换&#34;&gt;宏替换&lt;/h3&gt;

&lt;p&gt;由于AdNetwork要对接的第三方平台太多，而各家Tracking时候需要的参数是不一样的。（为什么没有一个广告协会之类规范一下？！），所以就会有宏替换这么一个奇特而又奇妙的东西。&lt;/p&gt;

&lt;p&gt;举一个例子：&lt;/p&gt;

&lt;p&gt;假如，归因平台需要一个参数DeviceId，但是归因平台A用的参数是&lt;code&gt;did&lt;/code&gt;，例如&lt;code&gt;http://a.com/tracking?did=XX&lt;/code&gt;, 而归因平台B用的参数是&lt;code&gt;device&lt;/code&gt;，例如&lt;code&gt;http://b.com/tracking?device=XX&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;AdNetwork并不需要知道每一家归因平台的DeviceId应该怎么上报，只需要提供一批可供替换的变量，让客户自己填。例如DeviceId在AdNetwork的变量是shebeihao，那么上面两家分别填写：&lt;code&gt;http://a.com/tracking?did={shebeihao}&lt;/code&gt;，和&lt;code&gt;http://a.com/tracking?device={shebeihao}&lt;/code&gt;，等上报时候，将这些信息都被AdNetwork替换正确。&lt;/p&gt;

&lt;p&gt;同样的，归因平台也有类似的宏替换的机制，如果AdNetwork的PostBack url是&lt;code&gt;http://ad.com/postback&lt;/code&gt;,那对于归因平台A，Postback url就是&lt;code&gt;http://ad.com/postback?shebeihao={did}&lt;/code&gt;,对于归因平台B，Postback url就是&lt;code&gt;http://ad.com/postback?shebeihao={device}&lt;/code&gt;
归因平台也是，Postback时候，也可以走同样的流程。&lt;/p&gt;

&lt;h2 id=&#34;系统演进&#34;&gt;系统演进&lt;/h2&gt;

&lt;h3 id=&#34;第一版基于参数透传&#34;&gt;第一版基于参数透传&lt;/h3&gt;

&lt;p&gt;并且自己组装了一个customParm,将所有需要的维度而又无法透传的参数组装到一起，回传回来直接根据这些透传参数生成安装报表。&lt;/p&gt;

&lt;p&gt;问题：
- 参数过程某些家解析会出错
- 传递过程中参数容易丢&lt;/p&gt;

&lt;h3 id=&#34;第二版基于clickid查找&#34;&gt;第二版基于ClickId查找&lt;/h3&gt;

&lt;p&gt;只使用ClickId归因&lt;/p&gt;

&lt;p&gt;问题：
- 支持30天回溯的话，对系统压力比较大，需要引入NoSql
- 如果ClickId丢失，基本就丢了&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>