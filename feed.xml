<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>璐濒殉漂流记</title>
    <link>https://lawulu.github.io/feed/index.xml</link>
    <description>Recent content on 璐濒殉漂流记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 21 Feb 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lawulu.github.io/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About</title>
      <link>https://lawulu.github.io/about/</link>
      <pubDate>Tue, 21 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/about/</guid>
      <description>

&lt;h3 id=&#34;关于本站&#34;&gt;关于本站&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;把一个技术搞懂再讲清楚,是很花费精力和体现能力的事.
貌似,我都比较欠缺,所以本站技术类文章都是只言片语的泛泛而谈,现做到只为记录,不为分享吧.&lt;/li&gt;
&lt;li&gt;之前很多历史文章都是用的英文标点,在现在模板下,显示效果很差,有时间调整一下.&lt;/li&gt;
&lt;li&gt;陆续迁移历史文章中&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;本站分类&#34;&gt;本站分类&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;爆栈&amp;amp;基线器&lt;/code&gt; 具体技术相关的随笔,取自StackOverflow和Github,因为有种说法编程就是从上面两个网站Copy&amp;amp;Paste,这个分类更像一个带文字说明的个人的gist.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Aij一思考&lt;/code&gt; 工作生活中的一些感悟,取自“人类一思考上帝就发笑”和黑客帝国里面的Matrix&lt;/li&gt;
&lt;li&gt;&lt;code&gt;以德服人&lt;/code&gt; 关于公司管理和职业生涯的一些思考和经验,取自功夫皇帝方世玉中雷老虎的口头禅“以德服人”和三国杀刘备的台词.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AkiRoss&lt;/code&gt; 技术架构或者业界新闻相关,比&lt;code&gt;爆栈&amp;amp;基线期&lt;/code&gt;要宏观,取自当年最终幻想电影版的女主角&lt;a href=&#34;http://finalfantasy.wikia.com/wiki/Aki_Ross&#34;&gt;Aki Ross&lt;/a&gt;的名字,&lt;code&gt;AkiRoss&lt;/code&gt;和&lt;code&gt;architect&lt;/code&gt;前面读音一样.Aki Ross是我刚接触计算机时候认为最完美的女性形象.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;本站历史&#34;&gt;本站历史&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2003年&lt;/strong&gt;
随着博客的兴起在天涯和方兴东的博客中国开始写博客,后来在MSN Space写过一段时间,自然没有坚持下来&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;2006年&lt;/strong&gt;
因为百度空间可以导入MSN Space,访问速度又快,在百度断断续续写了四五年.高峰时候,不管是无病呻吟还是无聊转发,虽然基本都是自嗨,但平均一月能写一篇.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;2015年&lt;/strong&gt;
百度审查严厉时候,我没有离开；百度强制升级时候,我没有离开；终于,百度空间关闭了……&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;2017年&lt;/strong&gt;
一直想着自己建一个自有博客.因为一直对npm敬而远之,16年时候折腾过一段Hexo直接放弃,（即使Docker也不太方便).就选择了Hugo.唯一美中不足的是模板有点少.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;todo&#34;&gt;TODO&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 静态网站缺点是对帖子Metadata的管理不方便,需要想办法处理一下.话说对文本文件设置metadata怎么没有流行起来？现在S3和OSS都是有metadata的&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 编辑器（我用有道)和Hexo对Markdown的语法支持不一致,插入图片也不方便.Go还是比较年轻,貌似可供选择的Markdown渲染也不多,回头研究一下&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 想办法把百度的文章以及放到微博微信知乎上的东西写程序导过来&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;del&gt;Table Content支持&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Git submodule研究……貌似突然不行了,现在只能在Idea里面提交&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;del&gt;百度统计&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; &lt;del&gt;图片插入,TodoList语法&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS初窥</title>
      <link>https://lawulu.github.io/post/AngularJS%E5%88%9D%E7%AA%A5/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/AngularJS%E5%88%9D%E7%AA%A5/</guid>
      <description>

&lt;p&gt;无数人吐槽过前端框架的层出不穷,眼看前端开发要脱离浏览器兼容性的苦海,又要落入框架碎片的深坑.从语言本身到编译到打包到开发框架各种框架层出不穷&amp;hellip;是终端用户需求太多还是前端大牛们野心太大? 不管怎样,报G家大腿选择Angular似乎没什么问题,另一个大腿的Reactive本身不是一个完备的框架.&lt;/p&gt;

&lt;h2 id=&#34;angular简介&#34;&gt;Angular简介&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在Web开发中需要JS做什么？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;与服务器交互&lt;/li&gt;
&lt;li&gt;操作DOM&lt;/li&gt;
&lt;li&gt;简单的逻辑控制&lt;/li&gt;
&lt;li&gt;输入验证&lt;/li&gt;
&lt;li&gt;路由&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Angular做了什么改变？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;引入了指令,ng开头,来扩展HTML&lt;/li&gt;
&lt;li&gt;数据绑定,通过对HTML元素增加指令ng-model&lt;/li&gt;
&lt;li&gt;使用directive来自定义指令&lt;/li&gt;
&lt;li&gt;Scope,提供了HTML视图和JS控制器之间的纽带&lt;/li&gt;
&lt;li&gt;Controller,可以视为一个$Scope的构造函数&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数据绑定 即将Dom的变化绑定到数据的变化上面去,因为用的1,所以这个绑定是双向的,有时候想只改变页面,会影响到数据&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;使用一周的感受&#34;&gt;使用一周的感受&lt;/h2&gt;

&lt;h3 id=&#34;一些坑&#34;&gt;一些坑:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;http是异步,要在.function中处理,或者统一在配置里面设置&lt;code&gt;async : true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;怎么Lazy初始化？没有找到办法&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;controller之间的交互&#34;&gt;Controller之间的交互&lt;/h3&gt;

&lt;p&gt;两种办法&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/29467339/how-to-call-a-function-from-another-controller-in-angularjs&#34;&gt;http://stackoverflow.com/questions/29467339/how-to-call-a-function-from-another-controller-in-angularjs&lt;/a&gt;
本质是绑定到RootScope里面,通过事件来响应&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/findsafety/article/details/50403242&#34;&gt;http://blog.csdn.net/findsafety/article/details/50403242&lt;/a&gt;
原生dom与js的处理办法,可能会版本之间不兼容,本质是通过dom找到Ng-controller的方法.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;    var appElement = document.querySelector(&#39;[ng-controller=&amp;quot;EndCardEditCtrl as ctrl&amp;quot;]&#39;);
    var editCtrl = angular.element(appElement);
    
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;与jquery-js之间的交互&#34;&gt;与Jquery/JS之间的交互&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;有时候Jquery绑定Function时候,Dom并没有生成,所以需要替换成Angular的&lt;code&gt;ng-click&lt;/code&gt;事件.&lt;/li&gt;
&lt;li&gt;JS中可以通过元素来找的其绑定的scope
&lt;code&gt;
window.angular.element(&amp;quot;#divId&amp;quot;).scope().doSth()
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;angular的分支循环&#34;&gt;Angular的分支循环&lt;/h3&gt;

&lt;p&gt;Angular提供了Ng-show等逻辑判断,来控制页面的变化.
提供了Switch和For来做分支和循环.
简单来说,基本可以对Html的显示进行编程.&lt;/p&gt;

&lt;h3 id=&#34;scope-apply&#34;&gt;$scope.$apply()&lt;/h3&gt;

&lt;p&gt;点击按钮之后,为什么会绑定成功?奥秘就在于Angular把&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Events =&amp;gt; ng-click
Timeouts =&amp;gt; $timeout
jQuery.ajax() =&amp;gt; $http
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;都Wrapper了,只要这些事件被触发,自动调用&lt;code&gt;$scope.$apply()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;问题是很多时候(在$scope之外的操作)需要自己手动调用, 但是Angular又保证此方法不能调用两次.
所以官方推荐使用Angular自己那套($Resource,$Route,service之类&amp;hellip;).恩,有种上了贼船的感觉.&lt;/p&gt;

&lt;h3 id=&#34;resource&#34;&gt;$Resource&lt;/h3&gt;

&lt;p&gt;一个对HttpRest的封装,简单的CRUD确实很方便,但是遇到复杂的需求就要抓瞎,很多时候需要调整后端..所以有很多人说,Angular适合做简单的CRUD应用.&lt;/p&gt;

&lt;h3 id=&#34;ng-change&#34;&gt;Ng-change&lt;/h3&gt;

&lt;p&gt;ng-change requires ng-model, without it will not work&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error: [$compile:ctreq] http://errors.angularjs.org/1.4.5/$compile/ctreq?p0=ngModel&amp;amp;p1=ngChange

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外 ng-change对File不生效&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular.js/issues/1375&#34;&gt;https://github.com/angular/angular.js/issues/1375&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;单元测试&#34;&gt;单元测试&lt;/h3&gt;

&lt;p&gt;Angular轮了一套Service,Factory之流,自然也少不了单元测试..不知道有多少人会为页面写这玩意.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Redis的安全哲学</title>
      <link>https://lawulu.github.io/post/Redis%E7%9A%84%E5%AE%89%E5%85%A8%E5%93%B2%E5%AD%A6/</link>
      <pubDate>Mon, 15 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/Redis%E7%9A%84%E5%AE%89%E5%85%A8%E5%93%B2%E5%AD%A6/</guid>
      <description>

&lt;p&gt;最近看到Redis的作者antirez写的一篇blog: &lt;a href=&#34;http://antirez.com/news/96&#34;&gt;http://antirez.com/news/96&lt;/a&gt;
里面有些东西很有意思.摘录一些观点:&lt;/p&gt;

&lt;h2 id=&#34;为什么redis这么多-安全漏洞&#34;&gt;为什么Redis这么多&amp;rdquo;安全漏洞&amp;rdquo;?&lt;/h2&gt;

&lt;p&gt;作者说经常收到一些Redis不安全的Report,但是大部分Report其实跟Redis没有什么关系或者说对Redis来说无关紧要.因为Redis的绝大多数用户都是将Redis放到一个安全的环境里面,而安全是一个很大的feature,Redis不会为了一小撮用户做开发这么复杂的功能.
&amp;gt;it’s totally insecure to let untrusted clients access the system, please protect it from the outside world yourself&lt;/p&gt;

&lt;h2 id=&#34;一次hack过程&#34;&gt;一次Hack过程&lt;/h2&gt;

&lt;p&gt;安全页面写到: &lt;a href=&#34;http://redis.io/topics/security&#34;&gt;http://redis.io/topics/security&lt;/a&gt;
&amp;gt;the ability to control the server configuration using the CONFIG command makes the client able to change the working directory of the program and the name of the dump file. This allows clients to write RDB Redis files at random paths, that is a security issue that may easily lead to the ability to run untrusted code as the same user as Redis is running&lt;/p&gt;

&lt;p&gt;所以,使用config命令可以往主机的Path写文件,作者展示了这一过程(为防止有些&lt;code&gt;script kiddies cut &amp;amp; paste the attack&lt;/code&gt;,没有直接提供一个脚本,并且还首先备份了当前的数据,这里省略一些无关紧要的步骤):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;生成一对RSA key,并且写到一个文件里面,前后加上换行符
&lt;code&gt;
$ (echo -e &amp;quot;\n\n&amp;quot;; cat id_rsa.pub; echo -e &amp;quot;\n\n&amp;quot;) &amp;gt; foo.txt
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将public key写到一个KV里面
&lt;code&gt;
cat foo.txt | redis-cli -h 192.168.1.11 -x set crackit
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置工作目录
&lt;code&gt;
config set dir /Users/antirez/.ssh/
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将内存中数据保存到Db文件中
&lt;code&gt;
config set dbfilename &amp;quot;authorized.keys&amp;quot;
save
&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;大功告成!&lt;/p&gt;

&lt;h2 id=&#34;为什么不默认bind-127-0-0-1&#34;&gt;为什么不默认bind 127.0.0.1?&lt;/h2&gt;

&lt;p&gt;事实上,如果启动时候带上默认的配置文件(redis.conf),就不存在这个安全隐患,因为配置文件里面默认是只绑定了Loopback address.既然作者知道这个安全隐患,为什么不默认启用这个配置文件呢?(就像Mysql那样).&lt;/p&gt;

&lt;p&gt;作者的解释是,因为RTFM（Read The Fucking Manual）&lt;/p&gt;

&lt;h2 id=&#34;使用auth&#34;&gt;使用Auth&lt;/h2&gt;

&lt;p&gt;虽然并不能真正解决安全问题..最简单有效的方法就是使用Auth.使用Auth的的几点说明:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;密码要尽可能的复杂,以防被brute force&lt;/li&gt;
&lt;li&gt;Auth的消耗非常少,只是在连接建立时候做一次鉴权,只有连接在,就不用再做鉴权&lt;/li&gt;
&lt;li&gt;未来可能会有ACL机制,比如某些用户并没有&lt;code&gt;config set dir&lt;/code&gt;的权限&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>How 2015 flies</title>
      <link>https://lawulu.github.io/post/%E6%88%91%E7%9A%842015/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/%E6%88%91%E7%9A%842015/</guid>
      <description>

&lt;p&gt;光阴者,百代之过客也.在我年少畅想未来时候,2015从来都是遥远的,而现在,不管曾经多少梦想不管曾经多少遗憾,2015已经彻底逝者如斯夫了.这一年,发生了什么？&lt;/p&gt;

&lt;h2 id=&#34;时间线&#34;&gt;时间线&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;年初S整个公司业绩不好,加上项目被cut off,一直想着换工作.后来又做了半年新项目,反而更加坚定了离开的念头.&lt;/li&gt;
&lt;li&gt;6月份有了新去处,但是被S的一个领导拉去现在公司C,中间断断续续好几个机会都是S公司的人脉,总的来说,虽然一直后悔说应该早点离开,但在S公司还是非常愉快和值得留念的.&lt;/li&gt;
&lt;li&gt;在公司C三个月之后,C公司发生大的人事变动,继年初之后,再一次见识到了职场的波澜壮阔.无愧于心,专心做好自己的事,提高自己才是王道.&lt;/li&gt;
&lt;li&gt;9月份,许久的期盼之后,媳妇终于确认怀孕.备孕育儿这事是提升夫妻和谐关系增加家庭责任感的一件重要事情.&lt;/li&gt;
&lt;li&gt;下半年一直想着提升生活质量,开始开车上下班,但是每天因为车位问题,还有车没什么智能辅助设备,诸多不便,一点也没有体会到驾驶的乐趣；眼看着房价一点点涨,却顾前顾后没有换房的勇气,到年底房价彻底涨起来之后,终于绝了换房的念头.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;从微博与微信回忆2015&#34;&gt;从微博与微信回忆2015&lt;/h2&gt;

&lt;h3 id=&#34;年初感慨颇多&#34;&gt;年初感慨颇多&lt;/h3&gt;

&lt;p&gt;感慨常立志：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;其实这个时候最有价值的不是什么下决心做新东西,而是那些过去已经开始值得保持下去的旧东西&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;感慨自己：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这个世界上自信与真诚的人真是太少了！ 对自己要求太完美,不面对现实,喜欢做鸵鸟.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;感慨裁员风波的公司：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;各路神仙上蹿下跳,各路跳梁粉墨登场,各色人等各显神通.随波逐流或奋力跃出,劳燕分飞稻粱谋！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;柴静雾霾调查&#34;&gt;柴静雾霾调查&lt;/h3&gt;

&lt;p&gt;记得中学政治课本一直在笑话资本主义先污染后治理,奥运前夕有运动员说北京空气差还跟风去骂.在现在的政治体制下,如果执政者顾虑重重并无动于衷,屁民只能逆来顺受麻木不仁.&lt;/p&gt;

&lt;h3 id=&#34;平凡世界电视剧版播出&#34;&gt;平凡世界电视剧版播出&lt;/h3&gt;

&lt;p&gt;电视剧有亮点,但跟书中的感觉差距很大.初高中时候读了平凡有两遍以上,印象中,书中对官宦阶级小姐的YY和对爱读书的自傲,满足了在小城长大的我的很多不切实的幻想.事实上,路遥自己的人生比孙少平们更精彩.&lt;/p&gt;

&lt;h3 id=&#34;父亲65岁生日&#34;&gt;父亲65岁生日&lt;/h3&gt;

&lt;p&gt;仓促回郑,深深觉得现代化过程中,我们欠父母的太多太多.
14年11月的感慨：
&amp;gt;上一辈的痛苦和烦恼:三分之一是因为时运不济,遇到的通过个人努力就能抓住的机会太少；三分之一是因为贫穷,很长一段生命都在为温饱而挣扎；三分之一是因为对家庭对亲人付出太多.&lt;/p&gt;

&lt;p&gt;之前看了&lt;a href=&#34;http://www.douban.com/note/468023670/&#34;&gt;三毛父亲给三毛的信&lt;/a&gt;,印象颇深.&lt;/p&gt;

&lt;h3 id=&#34;尤文打入欧冠决赛&#34;&gt;尤文打入欧冠决赛&lt;/h3&gt;

&lt;p&gt;有机会,实力差距太明显.&lt;/p&gt;

&lt;h3 id=&#34;全民创业&#34;&gt;全民创业&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;昨天见了一个做实业的老板,在自己花钱做移动互联网.说实业利润下降,说听到国家互联网+的口号很害怕都进来&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;来到现在公司也是受全民创业风潮的影响,事实上我感觉市面上80%的APP都是垃圾.真正能提高生活质量和效率的APP在哪里？&lt;/p&gt;

&lt;h3 id=&#34;新公司&#34;&gt;新公司&lt;/h3&gt;

&lt;p&gt;新的环境,新的同事,新的挑战&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;共事不是要证明自己比别人优秀,而是双赢.&lt;/p&gt;

&lt;p&gt;反思不是要找理由去说明自己做对了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;母亲的来电&#34;&gt;母亲的来电&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;昨天各种出事,忙得晕头转向,突然接到母亲电话,问关于QQ的一个简单问题.突然觉得,什么是生活呢？(8.24)&lt;/p&gt;

&lt;p&gt;浑浑噩噩中,在这个世界上只有两种东西最能震撼人们的心灵,一是与老家的联系;二便是我们头顶上灿烂的雾霾.(12.1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;股市和房事-经济头脑&#34;&gt;股市和房事,经济头脑&lt;/h3&gt;

&lt;p&gt;年初稍赚了一笔,但是年中3000点时候没有回去.&lt;/p&gt;

&lt;p&gt;今年也没有换房.前面有12年的教训,今年又是身边好几个人买房.之前也偶尔在关注房价,小区的房价从300W到350W,自己关注的几套房涨的涨卖的卖,这都是实实在在发生的事,但是执行力一点也没有.
&amp;gt;执行力.一定要与有经济头脑的人为伍.虽然自称世界观已经稳定,但是可以学习的东西多着呢.&lt;/p&gt;

&lt;h3 id=&#34;电影老炮儿&#34;&gt;电影老炮儿&lt;/h3&gt;

&lt;p&gt;这片上映以来好评如潮,直接让我觉得自己三观不正了.还好这几天批评的多起来了.&lt;/p&gt;

&lt;p&gt;其实不是价值观多样化的问题,而是实在觉得这片的编剧太粗制滥造,活活把对手写成脑残加傻逼了.
拿《火星救援》来说,想办法在火星上种土豆,可以把九几年的火星探测器给加进来..老炮儿的编剧不是做作的明显就是完全不合逻辑.&lt;/p&gt;

&lt;h3 id=&#34;开车&#34;&gt;开车&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;张爱玲说过,出名要趁早.其实很多事情都是这样.之前一直对开车这件事比较抵触,从去年拿到车,一直到今年11月份趁着大屯路封站才开始开.&lt;/li&gt;
&lt;li&gt;感觉已经很多年没有新技能get√了.上一次还是学玩三国杀？自己看python和Android都是半途而废.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;对父母和家庭有亏欠,工作不够走心,在与赚钱能力无关东西上投入的精力太多.&lt;/p&gt;

&lt;p&gt;一大波聪明的小孩毕业进入BAT,一大波努力的老码农转行做互联网.现在机会很好,工作比较宽松,希望2016能真心喜欢并投入到与赚钱能力有关的事业中去.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一次Ajax上传文件的调试过程</title>
      <link>https://lawulu.github.io/post/%E4%B8%80%E6%AC%A1Ajax%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Sat, 19 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/%E4%B8%80%E6%AC%A1Ajax%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B/</guid>
      <description>

&lt;p&gt;很久不做Web了,帮一小弟解决的一个问题.发现新人解决问题都是在Search and Try,据他说无脑搜了很久,但是不会利用Chrome,也不会分析问题.&lt;/p&gt;

&lt;h2 id=&#34;现象和代码&#34;&gt;现象和代码&lt;/h2&gt;

&lt;h3 id=&#34;js端&#34;&gt;Js端&lt;/h3&gt;

&lt;p&gt;使用的FormData&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var formData = new FormData();
    var actionUrl = &amp;quot;/report/agentUpload&amp;quot;;
    var form = new FormData();
    form.append(&amp;quot;file&amp;quot;, $(&amp;quot;#reportFile&amp;quot; )[0]);

    var xhr = new XMLHttpRequest();
    xhr.open(&amp;quot;post&amp;quot;, actionUrl, true);
    xhr.onload = function () {
         alert(&amp;quot;上传完成!&amp;quot;);
    };

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;server端&#34;&gt;Server端&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public String upload(HttpServletRequest request, @RequestParam(value=&amp;quot;file&amp;quot;,required = true) MultipartFile file, ModelMap model)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是就是取不到,报错：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Required MultipartFile parameter &#39;file&#39; is not present
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;server端的问题&#34;&gt;Server端的问题？&lt;/h2&gt;

&lt;p&gt;是否发到了Server？&lt;/p&gt;

&lt;p&gt;看Chrome Network面板里面这次请求的Request：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;------WebKitFormBoundaryNLPhxKE21THaBaN1
Content-Disposition: form-data; name=&amp;quot;file&amp;quot;

[object HTMLInputElement]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;貌似是正确的,在Server端确认一下,将参数加上required=false
查看request:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;multipartParameters = {HashMap@8882}  size = 1
multipartParameterContentTypes = {HashMap@8883}  size = 1
multipartFiles = {LinkedMultiValueMap@8884}  size = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Request里面有东西,但是multipartFiles没有东西……&lt;/p&gt;

&lt;p&gt;&lt;em&gt;其实这时候应该已经看出问题了,因为那个值是一个String,但是没注意,自己盲目以为只要带multipartParameters就是文件&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;debug到CommonsMultipartResolver的resolveMultipart方法,里面有这段判断&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected MultipartParsingResult parseFileItems(List&amp;lt;FileItem&amp;gt; fileItems, String encoding) {
		MultiValueMap&amp;lt;String, MultipartFile&amp;gt; multipartFiles = new LinkedMultiValueMap&amp;lt;String, MultipartFile&amp;gt;();
		Map&amp;lt;String, String[]&amp;gt; multipartParameters = new HashMap&amp;lt;String, String[]&amp;gt;();
		Map&amp;lt;String, String&amp;gt; multipartParameterContentTypes = new HashMap&amp;lt;String, String&amp;gt;();

		// Extract multipart files and multipart parameters.
		for (FileItem fileItem : fileItems) {
			if (fileItem.isFormField()) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果是false…就往MultipartFile里面填值.
难道是Content-type的问题？&lt;/p&gt;

&lt;h3 id=&#34;去js端&#34;&gt;去Js端&lt;/h3&gt;

&lt;p&gt;先找到如何打印Formdata的：
&lt;a href=&#34;http://stackoverflow.com/questions/17066875/how-to-inspect-formdata&#34;&gt;http://stackoverflow.com/questions/17066875/how-to-inspect-formdata&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for (var pair of formData.entries()) {
    console.log(pair[0]+ &#39;, &#39; + pair[1]); 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印的东西是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;file, [object HTMLInputElement]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;决定采用原始的document.getElementById(&amp;ldquo;reportFile&amp;rdquo;).files[]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lastModifiedDate: Tue Dec 20 2015 10:39:39 GMT+0800 (CST)name: &amp;quot;工作簿1.xlsx&amp;quot;size: 23168type: &amp;quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&amp;quot;webkitRelativePath: &amp;quot;&amp;quot;__proto__: File

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终发现问题：
应该用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $(&amp;quot;#reportFile&amp;quot; )[0].files[0]

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;结论&#34;&gt;结论&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;盲目的去搜索其实非常浪费时间&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;要善用Chrome Console&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;chrome的一些调试技巧&#34;&gt;Chrome的一些调试技巧&lt;/h2&gt;

&lt;h3 id=&#34;如何找到对应的元素触发的function&#34;&gt;如何找到对应的元素触发的function？&lt;/h3&gt;

&lt;p&gt;可以在EventListerner里面把Click当做断点，也可以点击某个元素，找到对应监听的EventListener,或者对某一个片dom点击&lt;code&gt;Break on subtree modification&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;缓存相关&#34;&gt;缓存相关&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;强制刷新 cmd+shift+r&lt;/li&gt;

&lt;li&gt;&lt;p&gt;可以在设置中禁止缓存&lt;/p&gt;

&lt;h3 id=&#34;console&#34;&gt;console&lt;/h3&gt;

&lt;p&gt;在某个页面，可以在console页面随时调试,甚至可以执行函数：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;$(&#39;.choose_endcard&#39;).click()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But,为什么Xpath选择的不能调用Click…&lt;/p&gt;

&lt;h3 id=&#34;setting里面可以对console-log加上timestamp&#34;&gt;Setting里面可以对console.log加上Timestamp&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>一个诡异的Data source is closed问题</title>
      <link>https://lawulu.github.io/post/%E4%B8%80%E4%B8%AA%E8%AF%A1%E5%BC%82%E7%9A%84Data%20source%20is%20closed%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/%E4%B8%80%E4%B8%AA%E8%AF%A1%E5%BC%82%E7%9A%84Data%20source%20is%20closed%E9%97%AE%E9%A2%98/</guid>
      <description>

&lt;h3 id=&#34;问题由起&#34;&gt;问题由起&lt;/h3&gt;

&lt;p&gt;因为某些问题(这个问题稍后再提),将线上的DBCP版本从1.4升级到2.1,大概扫了一下官方文档,没有迁移指南,只是几个属性名称变了,感觉问题不大,直接升级.升级之后,UT一下,通过.但是上线之后一直报下面错误：
&amp;gt;Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Data source is closed
    at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:23)
    at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:107)
    at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:98)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:386)
    &amp;hellip; 43 more&lt;/p&gt;

&lt;h3 id=&#34;问题背景&#34;&gt;问题背景&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;项目因为需要动态切换数据源,使用的是++AbstractRoutingDataSource++&lt;/li&gt;

&lt;li&gt;&lt;p&gt;需要动态切换的数据源比较多,项目初始化时候通过++BeanDefinitionBuilder++来根据数据库配置动态创建数据源,而报错的连接正是动态生成的的数据源.&lt;/p&gt;

&lt;h3 id=&#34;问题定位&#34;&gt;问题定位&lt;/h3&gt;

&lt;h4 id=&#34;为什么ut测试成功&#34;&gt;为什么UT测试成功&lt;/h4&gt;

&lt;p&gt;原来是UT的时候,因为配置文件,测试其实走的是++AbstractRoutingDataSource++的默认的数据源,并没有走动态生成的数据源&lt;/p&gt;

&lt;h4 id=&#34;怀疑是参数问题或者其他原因&#34;&gt;怀疑是参数问题或者其他原因&lt;/h4&gt;

&lt;p&gt;只设置JDBC Url,依旧报错；换成dbcp,不报错.&lt;/p&gt;

&lt;h4 id=&#34;abstractroutingdatasource的问题&#34;&gt;AbstractRoutingDataSource的问题？&lt;/h4&gt;

&lt;p&gt;使用XML配置,没有问题&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;至此,基本确认是++DBCP2++和++BeanDefinitionBuilder++&lt;/strong&gt;的问题&lt;/p&gt;

&lt;h3 id=&#34;查看源码和debug&#34;&gt;查看源码和Debug&lt;/h3&gt;

&lt;h4 id=&#34;basicdatasource-dbcp1和2有什么区别&#34;&gt;BasicDataSource DBCP1和2有什么区别？&lt;/h4&gt;

&lt;p&gt;DBCP2实现了更多的接口：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBeanRegistration, AutoCloseable 

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看dbcp2创建链接和销毁的地方&#34;&gt;查看DBCP2创建链接和销毁的地方&lt;/h4&gt;

&lt;p&gt;是没有Create Connection还是什么时候被Close了？
被Close了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
		this.beanDefinitionMap.put(beanName, beanDefinition);

		if (oldBeanDefinition != null || containsSingleton(beanName)) {
			resetBeanDefinition(beanName);
		}
		
		
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;protected void resetBeanDefinition(String beanName) {
		// Remove the merged bean definition for the given bean, if already created.
		clearMergedBeanDefinition(beanName);

		// Remove corresponding bean from singleton cache, if any. Shouldn&#39;t usually
		// be necessary, rather just meant for overriding a context&#39;s default beans
		// (e.g. the default StaticMessageSource in a StaticApplicationContext).
		destroySingleton(beanName);

		// Reset all bean definitions that have the given bean as parent (recursively).
		for (String bdName : this.beanDefinitionNames) {
			if (!beanName.equals(bdName)) {
				BeanDefinition bd = this.beanDefinitionMap.get(bdName);
				if (beanName.equals(bd.getParentName())) {
					resetBeanDefinition(bdName);
				}
			}
		}
	}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原来Spring创建Bean的时候会检查是否有oldBeanDefinition,如果有则销毁之.而DBCP2实现了AutoCloseable接口,在这里直接被Close了.&lt;/p&gt;

&lt;h4 id=&#34;为什么有oldbeandefinition&#34;&gt;为什么有oldBeanDefinition？&lt;/h4&gt;

&lt;p&gt;为了支持另一种类型的数据源,引入了一个Bug,会在Spring BeanFactory里面引入重复的定义,因为在AbstractRoutingDataSource中是正确的,所以一直没有发现这个问题.第二次会销毁上次的Bean.
其实在DBCP1时候,也会销毁,但是因为在动态定义的时候没有定义destroy-method=&amp;ldquo;close&amp;rdquo;,其实会引起内存的泄露？&lt;/p&gt;

&lt;p&gt;结论：很多看似运行完好的软件其实都危机四伏..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scrapy</title>
      <link>https://lawulu.github.io/post/Scrapy%E5%88%9D%E7%AA%A5/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/Scrapy%E5%88%9D%E7%AA%A5/</guid>
      <description>

&lt;p&gt;最近出于兴趣看了一下Scrapy.第一次仔细研究一个Python框架,先说结论,爬虫分为两种,一种是贪婪爬虫,最常用的就是搜索引擎,看见Url就爬.另外一种是专业爬虫,类似于网络小数定期更新,价格比对.Scrapy适合做第二种.Scrapy专心做爬取逻辑,其优势是框架比较成熟,各种插件比较全.如果真正做一个工业化的产品,Scrapy远远不够,还要攒很多东西进来.其实如果对&lt;code&gt;requests&lt;/code&gt;和&lt;code&gt;beautifulsoup&lt;/code&gt;熟悉,直接上这俩就挺好的.&lt;/p&gt;

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;Scrapy其实是一个很轻量级或者简单的框架.几个概念：
1. &lt;code&gt;Request&lt;/code&gt;,&lt;code&gt;Response&lt;/code&gt;,顾名思义,对应的就是网络的请求和响应.
2. &lt;code&gt;Item&lt;/code&gt;或者python dict,对应的是爬取到的结果.
3. &lt;code&gt;Pipeline&lt;/code&gt;对Item的处理.
4. &lt;code&gt;Selector&lt;/code&gt;对应的是对HTML的处理
5. &lt;code&gt;Middleware&lt;/code&gt;相当于Filter,分两种,一种是针对Spider,一种针对网络连接
6. &lt;code&gt;Scheduler&lt;/code&gt;一个深度优先的队列
7. &lt;code&gt;Feed&lt;/code&gt; 官方提供的json或者json line的输出
8. &lt;code&gt;meta&lt;/code&gt; 可以在多个Spider之间传输数据&lt;/p&gt;

&lt;p&gt;其实把文档看一遍,下一个demo,很快就可以跑起来.&lt;/p&gt;

&lt;p&gt;看图其实很清楚：
&lt;img src=&#34;https://lawulu.github.io/iimg/scrapy.png&#34; alt=&#34;Scrapy Arch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从StartRequest开始,不停的返回Item或者返回Request,如果返回Item,就发到Pipeline去处理,返回Request,经过Callback处理之后,直到所有的Request都变成Item.正所谓,世界是属于Request,归根结底还是属于Item的.&lt;/p&gt;

&lt;h2 id=&#34;简单示例&#34;&gt;简单示例&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;import scrapy
class ZhihuSpider(scrapy.Spider):
    name = &amp;quot;zhihu&amp;quot;
    start_urls = [
        &#39;https://www.zhihu.com/explore&#39;,
    ]

    def parse(self, response):
        # self.logger.info(&amp;quot;------zzhon中国&amp;quot;)

        for feed in response.css(&#39;.recommend-feed&#39;):
            link = response.urljoin(feed.css(&#39;a::attr(href)&#39;).extract_first());
            yield scrapy.Request(link,callback=self.parse_content)
           

##!!!  print response.css(&#39;#zh-question-detail &amp;gt; div&#39;).extract()[0].encode(&#39;utf-8&#39;)

    def parse_content(self,response):
        yield {
            &#39;title&#39;:response.css(&#39;#zh-question-title &amp;gt; h2 &amp;gt; a::text&#39;).extract_first(),
            &#39;content&#39;:response.css(&#39;#zh-question-detail &amp;gt; div::text&#39;).extract(),
            &#39;link&#39;:response.url
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然这个示例跑起来之前,需要改一些配置文件和设置User-agent…&lt;/p&gt;

&lt;h2 id=&#34;吐槽&#34;&gt;吐槽&lt;/h2&gt;

&lt;p&gt;Java出身的程序员的吐槽… 不用在意😜&lt;/p&gt;

&lt;h3 id=&#34;日志只打印unicode问题&#34;&gt;日志只打印Unicode问题&lt;/h3&gt;

&lt;p&gt;Debug和监控起来非常不方便,我看官方把这个issue当做wont fix了,强烈推荐直接上Python3.对非英文世界来说,Python2下scrapy shell简直没了存在的必要…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2015-10-14 23:25:54 [scrapy] DEBUG: Scraped from &amp;lt;200 https://www.zhihu.com/question/29218955/answer/41797438&amp;gt; 
{&#39;content&#39;: [u&#39;\u666e\u6d31\u5728\u8fc7\u53bb\u5e94\u8be5\u662f\u4e0d\u4e0a\u53f0\u9762\u7684\u5427\uff1f\u4e5f\u6ca1\u95ee\u662f\u4e0d\u662f\u5c31\u95ee\u4e3a\u4ec0\u4e48\u4e86\uff0c\u5982\u679c\u95ee\u9898\u6709\u9519\u8bef\uff0c\u8bf7\u6307\u6b63&#39;], &#39;link&#39;: &#39;https://www.zhihu.com/question/19258955/answer/42797438&#39;, &#39;title&#39;: u&#39;\u666e\u6d31\u7531\u539f\u6765\u4e0d\u4e0a\u53f0\u9762\u7684\u8fb9\u9500\u8336\u5230\u5982\u4eca\u53d7\u5230\u5e7f\u5927\u8336\u53cb\u559c\u7231\u7684\u8336\u7c7b\uff0c\u9664\u4e86\u7092\u4f5c\u5916\uff0c\u666e\u6d31\u7684\u5de5\u827a\u6216\u8005\u8d28\u91cf\u6709\u4e86\u5f88\u5927\u8fdb\u6b65\u5417\uff1f&#39;} 

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scheduler太弱&#34;&gt;Scheduler太弱&lt;/h3&gt;

&lt;p&gt;自带的scheduler只能深度优先和广度优先,官方推荐是自家的scrapyd,稍微了解了下,应该是启动时候把任务分给多个进程,进程之间好像没法交互.&lt;/p&gt;

&lt;h3 id=&#34;spider-request之间很难协同&#34;&gt;Spider/Request之间很难协同&lt;/h3&gt;

&lt;p&gt;很多时候我们需要某几个Request应该在一个组里面,同一个组的Request可以共用Cookie,共用代理.这类的需求可以通过meta机制来实现…由于Scrapy的Request是无脑yield出来的,实现出来肯定很丑陋.&lt;/p&gt;

&lt;h3 id=&#34;callback-hell&#34;&gt;Callback hell&lt;/h3&gt;

&lt;p&gt;通过Callback来绑定处理方法,入口和可测试性很差,怪不得要加入Contract机制&lt;/p&gt;

&lt;h3 id=&#34;容错&#34;&gt;容错&lt;/h3&gt;

&lt;p&gt;容错机制很少,需要把Task持久化,官方提供的持久化到disk的方案感觉很初级很粗糙.&lt;/p&gt;

&lt;h2 id=&#34;splash&#34;&gt;Splash&lt;/h2&gt;

&lt;p&gt;Pyspider是用的&lt;code&gt;PhantomJS&lt;/code&gt;,Scrapy提供了一个基于Docker和Lua的Splash.
这货的问题是Splash没有保持渲染状态的方法,对于复杂的JS交互,一般的做法是一个lua脚本执行很多次,最后返回所有的结果.这样爬取的颗粒比较大,如果中间出现异常,不好处理,而且调用&lt;code&gt;splash::wait()&lt;/code&gt;总感觉不靠谱,没有提供Dom加载之后的回调吗？&lt;/p&gt;

&lt;h3 id=&#34;原理&#34;&gt;原理&lt;/h3&gt;

&lt;p&gt;Splash可以执行Lua脚本,官方封装了Splash类,可以和JS交互.这样,就可可以找到Dom中的Button,直接调用click事件,然后返回某些DOM中的Html或者Json.&lt;/p&gt;

&lt;h3 id=&#34;lua&#34;&gt;Lua&lt;/h3&gt;

&lt;p&gt;Lua 很值得一学,Nginx,游戏引擎,Redis都在用……
快速入门：&lt;a href=&#34;http://tylerneylon.com/a/learn-lua/&#34;&gt;http://tylerneylon.com/a/learn-lua/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lua稍微复杂并且可以玩出花的内置机制就是Metatable了,可以重载对字典(对象)各种操作符.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logback的一些奇技淫巧</title>
      <link>https://lawulu.github.io/post/Logback%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</link>
      <pubDate>Sun, 23 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/Logback%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</guid>
      <description>

&lt;p&gt;Logback是一款非常优秀的日志框架.但是每个开发面对的需求也是多种多样的.
如果你有下面的需求,那你看了这篇文章就可以了：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;每次调用链都生成一个唯一的traceId&lt;/li&gt;
&lt;li&gt;修改配置文件即时生效,例如,为了定位一个问题,临时将log级别修改为debug&lt;/li&gt;
&lt;li&gt;不同环境使用不同的配置&lt;/li&gt;
&lt;li&gt;Logback的默认Rolling策略是：有新的Log产生,如果需要rolling,则rename原来的文件.这样会存在的一个问题就是,如果没有新的log产生,就不会重命名原来的文件.如果遇上需要同步日志(例如Rsync),就会出现问题.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;日志的traceid&#34;&gt;日志的TraceId&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在Filter里面增加一个,ThreadLocal based 变量：&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;
public class CustomFilter extends OncePerRequestFilter {
	
	private static final Random random = new Random(System.currentTimeMillis()); //TODO

	@Override
	protected void doFilterInternal(HttpServletRequest request,
			HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		
	
		request.setAttribute(ApiConstants.RQID, rnd);
		
		response.setHeader(ApiConstants.HEADER_RQID, rnd);
		MDC.put(ApiConstants.RQID, rnd);
		try{
			filterChain.doFilter(request, response);
		}finally{
			MDC.remove(ApiConstants.RQID);
		}

	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;配置文件&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;encoder&amp;gt;
	        &amp;lt;pattern&amp;gt;%d{yyyy-MM-dd HH:mm:ss} %-4relative [%thread] %-5level %logger{35} [%X{x-jjk-rqid:-notFound}]- %msg%n&amp;lt;/pattern&amp;gt;
	    &amp;lt;/encoder&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;自动更新配置&#34;&gt;自动更新配置&lt;/h3&gt;

&lt;p&gt;显然会影响效率&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;configuration debug=&amp;quot;true&amp;quot; scan=&amp;quot;true&amp;quot; scanPeriod=&amp;quot;1 minutes&amp;quot;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;各个环境引入不同的profile&#34;&gt;各个环境引入不同的Profile&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;	&amp;lt;property resource=&amp;quot;config/config-${envTarget}.properties&amp;quot;/&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;基于条件写不同的文件-siftingappender&#34;&gt;基于条件写不同的文件：SiftingAppender&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt; &amp;lt;appender name=&amp;quot;stats&amp;quot; class=&amp;quot;ch.qos.logback.classic.sift.SiftingAppender&amp;quot;&amp;gt;
        &amp;lt;!-- in the absence of the class attribute, it is assumed that the
             desired discriminator type is
             ch.qos.logback.classic.sift.MDCBasedDiscriminator --&amp;gt;
        &amp;lt;discriminator&amp;gt;
            &amp;lt;key&amp;gt;date&amp;lt;/key&amp;gt;
            &amp;lt;defaultValue&amp;gt;unknown&amp;lt;/defaultValue&amp;gt;
        &amp;lt;/discriminator&amp;gt;
        &amp;lt;sift&amp;gt;
            &amp;lt;appender name=&amp;quot;FILE-${date}&amp;quot; class=&amp;quot;ch.qos.logback.core.FileAppender&amp;quot;&amp;gt;
                &amp;lt;file&amp;gt;/mnt/media-${date}.log&amp;lt;/file&amp;gt;
                &amp;lt;!--&amp;lt;append&amp;gt;false&amp;lt;/append&amp;gt;--&amp;gt;
                &amp;lt;encoder&amp;gt;
                    &amp;lt;pattern&amp;gt;%msg%n&amp;lt;/pattern&amp;gt;
                    &amp;lt;charset&amp;gt;UTF-8&amp;lt;/charset&amp;gt;
                &amp;lt;/encoder&amp;gt;
            &amp;lt;/appender&amp;gt;
        &amp;lt;/sift&amp;gt;
    &amp;lt;/appender&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码中需要写MDC变量：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        MDC.put(&amp;quot;date&amp;quot;, dateString);

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>一种统一的API签名校验实现</title>
      <link>https://lawulu.github.io/post/%E4%B8%80%E7%A7%8D%E7%BB%9F%E4%B8%80%E7%9A%84API%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/%E4%B8%80%E7%A7%8D%E7%BB%9F%E4%B8%80%E7%9A%84API%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C%E6%96%B9%E6%B3%95/</guid>
      <description>

&lt;h2 id=&#34;签名方法&#34;&gt;签名方法:&lt;/h2&gt;

&lt;h2 id=&#34;header&#34;&gt;Header:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
@RequestHeader(value = &amp;quot;x-header-timestamp&amp;quot;) Long timestamp,
@RequestHeader(value = &amp;quot;x-header-appid&amp;quot;) String appid,
@RequestHeader(value = &amp;quot;x-header-sign&amp;quot;) String sign
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;源串-orignalstring&#34;&gt;源串 orignalString:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
HttpMethod=URI&amp;amp;Param1=Value1&amp;amp;Param2=Value2RequestBodySeckeyTimestamp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注1:Method大写
注2:为方便期间Param不排序,如果出问题再说
注3:ResustBody可能为空
注4:SecKey跟AppId是一一对应.&lt;/p&gt;

&lt;h2 id=&#34;签名-sign&#34;&gt;签名 sign:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sign=Md5(orignalString).toUpperCase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;暂时只支持MD5&lt;/p&gt;

&lt;h2 id=&#34;实现&#34;&gt;实现:&lt;/h2&gt;

&lt;p&gt;原则上,应该和业务逻辑代码分离,不影响业务逻辑代码的开发&lt;/p&gt;

&lt;h3 id=&#34;1-根据注解mapping需要检查签名的方法&#34;&gt;1 根据注解Mapping需要检查签名的方法&lt;/h3&gt;

&lt;p&gt;例如:Spring @ControllerAdvice(annotations = RestController.class)
如需要,可自定义自己的注解&lt;/p&gt;

&lt;h3 id=&#34;2-获取参数&#34;&gt;2 获取参数&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
@ModelAttribute
	public void checkSign(HttpServletRequest request, HttpServletResponse response, @RequestBody(required=false) String requestbody,
			@RequestHeader(value = &amp;quot;x-header-timestamp&amp;quot;) Long timestamp,
			@RequestHeader(value = &amp;quot;x-header-appid&amp;quot;) String appid,
			@RequestHeader(value = &amp;quot;x-header-sign&amp;quot;) String sign) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-计算签名&#34;&gt;3 计算签名&lt;/h3&gt;

&lt;p&gt;可能需要在GLobalExceptionHandler中增加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    @ExceptionHandler(ServletRequestBindingException.class) 
    	@ResponseStatus(HttpStatus.BAD_REQUEST)	
    	@ResponseBody 
    	ErrorMessage handleServletRequestBindingException(ServletRequestBindingException ex) {	
    		
    		LOGGER.debug(&amp;quot;handleServletRequestBindingException&amp;quot;, ex);
    		return new ErrorMessage(ErrorCode.INVALID_HEADER.getCode(), ex.getMessage());//TODO
    	}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;增加filter&#34;&gt;增加Filter&lt;/h2&gt;

&lt;p&gt;注意：因为在ControllerAdvice消费了Request的InputStream,所以需要在前面的Filter中Copy一份Request出来
代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Wrapper used to be able to consume multiple times the InputStream provided by
 * HttpServletRequest
 *
 * @author lawulu
 * @see https://github.com/ClouDesire/spring-utils/
 * 
 */

public class CustomHttpServletRequestWrapper extends HttpServletRequestWrapper {
    private final byte[] body;

    public CustomHttpServletRequestWrapper(HttpServletRequest request) throws IOException {
        super(request);
        if (request.getContentType() != null
                &amp;amp;&amp;amp; request.getContentType().contains(MediaType.APPLICATION_JSON.toString())) {
            InputStream inputStream = request.getInputStream();
            if (inputStream != null) {
                body = IOUtils.toByteArray(inputStream);
                return;
            }
        }
        body = null;
    }

    @Override
    public ServletInputStream getInputStream() throws IOException {
        if (body == null)
            return super.getInputStream();

        final ByteArrayInputStream stream = new ByteArrayInputStream(body);
        ServletInputStream inputStream = new ServletInputStream() {
            @Override
            public int read() throws IOException {
                return stream.read();
            }
        };
        return inputStream;
    }

    @Override
    public BufferedReader getReader() throws IOException {
        if (body == null)
            return super.getReader();

        return new BufferedReader(new InputStreamReader(new ByteArrayInputStream(body), StandardCharsets.UTF_8));
    }

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>都是DNS惹的祸</title>
      <link>https://lawulu.github.io/post/%E9%83%BD%E6%98%AFDNS%E6%83%B9%E7%9A%84%E8%B4%A7/</link>
      <pubDate>Sat, 01 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/%E9%83%BD%E6%98%AFDNS%E6%83%B9%E7%9A%84%E8%B4%A7/</guid>
      <description>

&lt;p&gt;最近因为工位调整,内部用的测试机换了个地方,结果发现上面部署的应用变得都反应奇慢,每次SSH上去也要卡顿很久.&lt;/p&gt;

&lt;h2 id=&#34;是不是网络问题&#34;&gt;是不是网络问题?&lt;/h2&gt;

&lt;h3 id=&#34;ping比较正常&#34;&gt;Ping比较正常&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;PING 192.168.214.227 (192.168.214.227): 56 data bytes
64 bytes from 192.168.214.227: icmp_seq=0 ttl=64 time=0.073 ms
64 bytes from 192.168.214.227: icmp_seq=1 ttl=64 time=0.100 ms
64 bytes from 192.168.214.227: icmp_seq=2 ttl=64 time=0.092 ms
64 bytes from 192.168.214.227: icmp_seq=3 ttl=64 time=0.074 ms
64 bytes from 192.168.214.227: icmp_seq=4 ttl=64 time=0.057 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;没有丢包,traceroute貌似也没有问题&lt;/p&gt;

&lt;h3 id=&#34;测速&#34;&gt;测速&lt;/h3&gt;

&lt;p&gt;生成一个大文件:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#*-*coding:utf-8 *-*
&#39;&#39;&#39;&#39;&#39;
Created on 2012-6-14

&#39;&#39;&#39;
def gen_file(path,size):
    #首先以路径path新建一个文件，并设置模式为写
    file = open(path,&#39;w&#39;)
    #根据文件大小，偏移文件读取位置
    file.seek(1024*1024*1024*size)#姑且以GB为单位吧
    #然后在当前位置写入任何内容，必须要写入，不然文件不会那么大哦
    file.write(&#39;\x00&#39;)
    file.close()

gen_file(&#39;./test.dat&#39;,1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;scp上去,速度在兆级别..&lt;/p&gt;

&lt;h2 id=&#34;ssh&#34;&gt;SSH&lt;/h2&gt;

&lt;p&gt;用&lt;code&gt;ssh -v&lt;/code&gt; 找到Hang的地方,搜一下相关信息,很快就能找到需要改哪里.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim /etc/ssh/sshd_config
UseDNS=no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启&lt;code&gt;sudo service ssh restart&lt;/code&gt;解决问题&lt;/p&gt;

&lt;h2 id=&#34;mysql&#34;&gt;Mysql&lt;/h2&gt;

&lt;p&gt;mysql 客户端也有&lt;code&gt;--verbose&lt;/code&gt;的选项,但是设置了貌似没什么结果.搜了一下,很多说也是DNS的原因&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;show variables
| skip_name_resolve                                 | OFF                                                                                                                     |

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改 &lt;code&gt;vim /etc/mysql/my.cnf&lt;/code&gt;
增加一行 &lt;code&gt;skip-name-resolve&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>