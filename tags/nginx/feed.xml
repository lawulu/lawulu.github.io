<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>璐濒殉漂流记</title>
    <link>https://lawulu.github.io/tags/nginx/feed/index.xml</link>
    <description>Recent content on 璐濒殉漂流记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="https://lawulu.github.io/tags/nginx/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>利用X-Accel-Redirect做静态资源的身份验证</title>
      <link>https://lawulu.github.io/post/%E5%88%A9%E7%94%A8X-Accel-Redirect%E5%81%9A%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</link>
      <pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/%E5%88%A9%E7%94%A8X-Accel-Redirect%E5%81%9A%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%9A%84%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</guid>
      <description>

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;h3 id=&#34;需求&#34;&gt;需求&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;用户能查到自己历史体检报告&lt;/li&gt;
&lt;li&gt;用户能尽快查到刚出的体检报告&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数据安全性&lt;/p&gt;

&lt;h3 id=&#34;初步方案&#34;&gt;初步方案&lt;/h3&gt;

&lt;p&gt;Api server根据索引表生成token, 返回给客户端,客户端去数据中心提供文件下载的服务&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;生成Token方案:类似于现在登陆token或者签名机制. Api Server根据时间和deviceId,barcode生成一个,客户端请求时候带上DeviceId&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;认证方案: Nginx/Apache X-Accel-Redirect, Java/PHP校验token,然后转发给Nginx的标志为Internal Location.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Nginx/Apache需要限制同一deviceId和ip的访问次数&lt;/p&gt;

&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;

&lt;h3 id=&#34;java实现&#34;&gt;Java实现&lt;/h3&gt;

&lt;p&gt;为了减少依赖，使用Servlet来做
```
Map&lt;String, String&gt; paramMap = new HashMap&lt;String, String&gt;();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;paramMap.put(Constants.P_DEVICE_ID, deviceId);
paramMap.put(Constants.P_BARCODE, barcode);
paramMap.put(Constants.P_VERSION, version);
paramMap.put(Constants.P_RANDOM_STRING, randomString);
paramMap.put(Constants.P_CHANNEL,channel);

if(!validateParam(paramMap,timestamp,sign)){
    hanldExceptionResponse(response,&amp;quot;invalid sign&amp;quot;);
    return;
}


response.setHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/octet-stream&amp;quot;);
String date =barcode.substring(7,7+6);
 //opt/nfsdata/reports/2/150915/report-h5_000800715091551133.zip
String path = Constants.U_PRIFIX+&amp;quot;/&amp;quot;+version+&amp;quot;/&amp;quot;+date+&amp;quot;/&amp;quot;+Constants.U_PATH_PRFIX+barcode+&amp;quot;.zip&amp;quot;;
logger.debug(&amp;quot;The path is  {}&amp;quot;, path);

response.setHeader(&amp;quot;X-Accel-Redirect&amp;quot;,path);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;private void hanldExceptionResponse(HttpServletResponse response,String msg) throws IOException {
        response.sendError(403,msg);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;

### nginx修改
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;location ~ /file/(.&lt;em&gt;)/(.&lt;/em&gt;)$ {
       alias &amp;ldquo;/opt/reports/$1/$2&amp;rdquo;;
add_header Content-Disposition &amp;ldquo;attachment; filename=$2&amp;rdquo;;
#add_header Content-Disposition &amp;ldquo;attachment; filename=fileceshi111&amp;rdquo;;
        internal;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#   error_page 404 =200 @backend ;
}

location @backend{
    proxy_pass http://localhost:8080;

}

location /reports/ {
 #   root   /usr/share/nginx/html;
  #  index  index.html index.htm;
     proxy_pass http://reportAuth;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;upstream  reportAuth {
        ip_hash;
        server 127.0.0.1:8080;
    }
```&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>