<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>璐濒殉漂流记</title>
    <link>https://lawulu.github.io/tags/%E5%AE%89%E5%85%A8/feed/index.xml</link>
    <description>Recent content on 璐濒殉漂流记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="https://lawulu.github.io/tags/%E5%AE%89%E5%85%A8/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>一种统一的API签名校验实现</title>
      <link>https://lawulu.github.io/post/%E4%B8%80%E7%A7%8D%E7%BB%9F%E4%B8%80%E7%9A%84API%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 10 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/%E4%B8%80%E7%A7%8D%E7%BB%9F%E4%B8%80%E7%9A%84API%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C%E6%96%B9%E6%B3%95/</guid>
      <description>

&lt;h2 id=&#34;签名方法&#34;&gt;签名方法:&lt;/h2&gt;

&lt;h2 id=&#34;header&#34;&gt;Header:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
@RequestHeader(value = &amp;quot;x-header-timestamp&amp;quot;) Long timestamp,
@RequestHeader(value = &amp;quot;x-header-appid&amp;quot;) String appid,
@RequestHeader(value = &amp;quot;x-header-sign&amp;quot;) String sign
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;源串-orignalstring&#34;&gt;源串 orignalString:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;
HttpMethod=URI&amp;amp;Param1=Value1&amp;amp;Param2=Value2RequestBodySeckeyTimestamp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注1:Method大写
注2:为方便期间Param不排序,如果出问题再说
注3:ResustBody可能为空
注4:SecKey跟AppId是一一对应.&lt;/p&gt;

&lt;h2 id=&#34;签名-sign&#34;&gt;签名 sign:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sign=Md5(orignalString).toUpperCase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;暂时只支持MD5&lt;/p&gt;

&lt;h2 id=&#34;实现&#34;&gt;实现:&lt;/h2&gt;

&lt;p&gt;原则上,应该和业务逻辑代码分离,不影响业务逻辑代码的开发&lt;/p&gt;

&lt;h3 id=&#34;1-根据注解mapping需要检查签名的方法&#34;&gt;1 根据注解Mapping需要检查签名的方法&lt;/h3&gt;

&lt;p&gt;例如:Spring @ControllerAdvice(annotations = RestController.class)
如需要,可自定义自己的注解&lt;/p&gt;

&lt;h3 id=&#34;2-获取参数&#34;&gt;2 获取参数&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
@ModelAttribute
	public void checkSign(HttpServletRequest request, HttpServletResponse response, @RequestBody(required=false) String requestbody,
			@RequestHeader(value = &amp;quot;x-header-timestamp&amp;quot;) Long timestamp,
			@RequestHeader(value = &amp;quot;x-header-appid&amp;quot;) String appid,
			@RequestHeader(value = &amp;quot;x-header-sign&amp;quot;) String sign) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-计算签名&#34;&gt;3 计算签名&lt;/h3&gt;

&lt;p&gt;可能需要在GLobalExceptionHandler中增加&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    @ExceptionHandler(ServletRequestBindingException.class) 
    	@ResponseStatus(HttpStatus.BAD_REQUEST)	
    	@ResponseBody 
    	ErrorMessage handleServletRequestBindingException(ServletRequestBindingException ex) {	
    		
    		LOGGER.debug(&amp;quot;handleServletRequestBindingException&amp;quot;, ex);
    		return new ErrorMessage(ErrorCode.INVALID_HEADER.getCode(), ex.getMessage());//TODO
    	}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;增加filter&#34;&gt;增加Filter&lt;/h2&gt;

&lt;p&gt;注意：因为在ControllerAdvice消费了Request的InputStream，所以需要在前面的Filter中Copy一份Request出来
代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Wrapper used to be able to consume multiple times the InputStream provided by
 * HttpServletRequest
 *
 * @author lawulu
 * @see https://github.com/ClouDesire/spring-utils/
 * 
 */

public class CustomHttpServletRequestWrapper extends HttpServletRequestWrapper {
    private final byte[] body;

    public CustomHttpServletRequestWrapper(HttpServletRequest request) throws IOException {
        super(request);
        if (request.getContentType() != null
                &amp;amp;&amp;amp; request.getContentType().contains(MediaType.APPLICATION_JSON.toString())) {
            InputStream inputStream = request.getInputStream();
            if (inputStream != null) {
                body = IOUtils.toByteArray(inputStream);
                return;
            }
        }
        body = null;
    }

    @Override
    public ServletInputStream getInputStream() throws IOException {
        if (body == null)
            return super.getInputStream();

        final ByteArrayInputStream stream = new ByteArrayInputStream(body);
        ServletInputStream inputStream = new ServletInputStream() {
            @Override
            public int read() throws IOException {
                return stream.read();
            }
        };
        return inputStream;
    }

    @Override
    public BufferedReader getReader() throws IOException {
        if (body == null)
            return super.getReader();

        return new BufferedReader(new InputStreamReader(new ByteArrayInputStream(body), StandardCharsets.UTF_8));
    }

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>