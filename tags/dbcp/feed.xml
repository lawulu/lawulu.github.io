<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>璐濒殉漂流记</title>
    <link>https://lawulu.github.io/tags/dbcp/feed/index.xml</link>
    <description>Recent content on 璐濒殉漂流记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="https://lawulu.github.io/tags/dbcp/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>一个诡异的Data source is closed问题</title>
      <link>https://lawulu.github.io/post/%E4%B8%80%E4%B8%AA%E8%AF%A1%E5%BC%82%E7%9A%84Data%20source%20is%20closed%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lawulu.github.io/post/%E4%B8%80%E4%B8%AA%E8%AF%A1%E5%BC%82%E7%9A%84Data%20source%20is%20closed%E9%97%AE%E9%A2%98/</guid>
      <description>

&lt;h3 id=&#34;问题由起&#34;&gt;问题由起&lt;/h3&gt;

&lt;p&gt;因为某些问题(这个问题稍后再提),将线上的DBCP版本从1.4升级到2.1,大概扫了一下官方文档,没有迁移指南,只是几个属性名称变了,感觉问题不大,直接升级.升级之后,UT一下,通过.但是上线之后一直报下面错误：
&amp;gt;Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is java.sql.SQLException: Data source is closed
    at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:23)
    at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:107)
    at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:98)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:386)
    &amp;hellip; 43 more&lt;/p&gt;

&lt;h3 id=&#34;问题背景&#34;&gt;问题背景&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;项目因为需要动态切换数据源,使用的是++AbstractRoutingDataSource++&lt;/li&gt;

&lt;li&gt;&lt;p&gt;需要动态切换的数据源比较多,项目初始化时候通过++BeanDefinitionBuilder++来根据数据库配置动态创建数据源,而报错的连接正是动态生成的的数据源.&lt;/p&gt;

&lt;h3 id=&#34;问题定位&#34;&gt;问题定位&lt;/h3&gt;

&lt;h4 id=&#34;为什么ut测试成功&#34;&gt;为什么UT测试成功&lt;/h4&gt;

&lt;p&gt;原来是UT的时候,因为配置文件,测试其实走的是++AbstractRoutingDataSource++的默认的数据源,并没有走动态生成的数据源&lt;/p&gt;

&lt;h4 id=&#34;怀疑是参数问题或者其他原因&#34;&gt;怀疑是参数问题或者其他原因&lt;/h4&gt;

&lt;p&gt;只设置JDBC Url,依旧报错；换成dbcp,不报错.&lt;/p&gt;

&lt;h4 id=&#34;abstractroutingdatasource的问题&#34;&gt;AbstractRoutingDataSource的问题？&lt;/h4&gt;

&lt;p&gt;使用XML配置,没有问题&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;至此,基本确认是++DBCP2++和++BeanDefinitionBuilder++&lt;/strong&gt;的问题&lt;/p&gt;

&lt;h3 id=&#34;查看源码和debug&#34;&gt;查看源码和Debug&lt;/h3&gt;

&lt;h4 id=&#34;basicdatasource-dbcp1和2有什么区别&#34;&gt;BasicDataSource DBCP1和2有什么区别？&lt;/h4&gt;

&lt;p&gt;DBCP2实现了更多的接口：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class BasicDataSource implements DataSource, BasicDataSourceMXBean, MBeanRegistration, AutoCloseable 

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看dbcp2创建链接和销毁的地方&#34;&gt;查看DBCP2创建链接和销毁的地方&lt;/h4&gt;

&lt;p&gt;是没有Create Connection还是什么时候被Close了？
被Close了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
		this.beanDefinitionMap.put(beanName, beanDefinition);

		if (oldBeanDefinition != null || containsSingleton(beanName)) {
			resetBeanDefinition(beanName);
		}
		
		
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;protected void resetBeanDefinition(String beanName) {
		// Remove the merged bean definition for the given bean, if already created.
		clearMergedBeanDefinition(beanName);

		// Remove corresponding bean from singleton cache, if any. Shouldn&#39;t usually
		// be necessary, rather just meant for overriding a context&#39;s default beans
		// (e.g. the default StaticMessageSource in a StaticApplicationContext).
		destroySingleton(beanName);

		// Reset all bean definitions that have the given bean as parent (recursively).
		for (String bdName : this.beanDefinitionNames) {
			if (!beanName.equals(bdName)) {
				BeanDefinition bd = this.beanDefinitionMap.get(bdName);
				if (beanName.equals(bd.getParentName())) {
					resetBeanDefinition(bdName);
				}
			}
		}
	}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;原来Spring创建Bean的时候会检查是否有oldBeanDefinition,如果有则销毁之.而DBCP2实现了AutoCloseable接口,在这里直接被Close了.&lt;/p&gt;

&lt;h4 id=&#34;为什么有oldbeandefinition&#34;&gt;为什么有oldBeanDefinition？&lt;/h4&gt;

&lt;p&gt;为了支持另一种类型的数据源,引入了一个Bug,会在Spring BeanFactory里面引入重复的定义,因为在AbstractRoutingDataSource中是正确的,所以一直没有发现这个问题.第二次会销毁上次的Bean.
其实在DBCP1时候,也会销毁,但是因为在动态定义的时候没有定义destroy-method=&amp;ldquo;close&amp;rdquo;,其实会引起内存的泄露？&lt;/p&gt;

&lt;p&gt;结论：很多看似运行完好的软件其实都危机四伏..&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>